##
## Copyright 2014-2016 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
#foreach ($request in $requestList)
#if ($request.isResourceTypeSwagger())
  #set ($tableMap = $request.tableMap)
  #set ($optionMap = $request.optionMap)
  $request.enableOutputDirectory()
  $manager.makeDirectory($request.generateDirPath)
  #set ($scriptEngine = $manager.createJavaScriptEngine())
  $scriptEngine.eval('load("./freegen/remoteapi/RemoteApiRule.js");')
  #if ($tableMap.ruleJsPath && $tableMap.ruleJsPath != '')
    $scriptEngine.eval("load('$tableMap.ruleJsPath');")
  #end
  #loadTypeMap()
  #set ($resourceTypeRemoteApi = "RemoteApi")
  #if ($request.requestName.startsWith($resourceTypeRemoteApi))
    $manager.info("gen remote api: ${request.requestName}")

    #foreach($swaggerJsonEntry in $optionMap.jsonMap.entrySet())
      #if ($swaggerJsonEntry.key == 'definitions')
        #set ($definitionMap = $swaggerJsonEntry.value)
      #end
    #end

    #set ($scheme = $request.requestName.replace($resourceTypeRemoteApi, ''))
    #set ($schemePackage = $scriptEngine.invokeFunction('schemePackage', $scheme))
    #set ($bsBehaviorMap = {})
    #set ($exBehaviorMap = {})
    #foreach($swaggerJsonEntry in $optionMap.jsonMap.entrySet())
      #if ($swaggerJsonEntry.key == 'paths')
        #set ($pathMap = $swaggerJsonEntry.value)
        #foreach($pathEntry in $pathMap.entrySet())
          #foreach($methodEntry in $pathEntry.value.entrySet())
            #set ($multipleHttpMethod = $pathEntry.value.size() > 1)
            #set ($api = { 'scheme': $scheme, 'url': $pathEntry.key, 'httpMethod': $methodEntry.key, 'multipleHttpMethod': $multipleHttpMethod, 'consumes': $methodEntry.value.consumes, 'produces': $methodEntry.value.produces })
            #if ($scriptEngine.invokeFunction('target', $api))
              #set ($api.url = $scriptEngine.invokeFunction('url', $api))
              ## param
              #set ($bodyProperties = {})
              #set ($pathVariables = {})
              #set ($queryProperties = {})
              #set ($formDataProperties = {})
              #set ($paramBean = {})
              #set ($returnBean = {})
              #foreach($parameter in $methodEntry.value['parameters'])
                #if ($parameter.in == 'body')
                  #set ($definitionKey = '')
                  #if ($parameter.schema && $parameter.schema['$ref'])
                    #set ($definitionKey = $parameter.schema['$ref'].replace('#/definitions/', '')))
                    #set ($bodyProperties = $definitionMap[$scriptEngine.invokeFunction('definitionKey', $definitionKey)].properties)
                    #processRemoteApiBean('param', $api, $bodyProperties)
                    #set ($paramBean = { 'package': "${request.package}.${schemePackage}.${subPackage}", 'className': ${class}, 'in': 'body' })
                  #end
                #elseif ($parameter.in == 'path')
                  $pathVariables.put($parameter.name, $parameter)
                #elseif ($parameter.in == 'query')
                  $queryProperties.put($parameter.name, $parameter)
                #elseif ($parameter.in == 'formData')
                  $formDataProperties.put($parameter.name, $parameter)
                #end
              #end
              #if ($queryProperties.size() != 0)
                #processRemoteApiBean('param', $api, $queryProperties)
                #set ($paramBean = { 'package': "${request.package}.${schemePackage}.${subPackage}", 'className': ${class}, 'in': 'query' }) })
              #end
              #if ($formDataProperties.size() != 0)
                #processRemoteApiBean('param', $api, $formDataProperties)
                #set ($paramBean = { 'package': "${request.package}.${schemePackage}.${subPackage}", 'className': ${class}, 'in': 'formData' }) })
              #end

              ## return
              #set ($returnProperties = {})
              #foreach($responseEntry in $methodEntry.value['responses'].entrySet())
                #set ($response = $responseEntry.value)
                #if ($response.type == 'array')
                  #if (${typeMap[$response.items.format]})
                    #set ($returnBean = { 'className': "${typeMap[$response.type]}<${typeMap[$response.items.format]}>" })
                  #elseif (${typeMap[$response.items.type]})
                    #set ($returnBean = { 'className': "${typeMap[$response.type]}<${typeMap[$response.items.type]}>" })
                  #else
                    #set ($definitionKey = $response.schema['$ref'].replace('#/definitions/', '')))
                    #set ($returnProperties = $definitionMap[$scriptEngine.invokeFunction('definitionKey', $definitionKey)].properties)
                    #if (!$returnProperties.empty)
                      #processRemoteApiBean('return', $api, $returnProperties)
                      #set ($returnBean = { 'package': "${request.package}.${schemePackage}.${subPackage}", 'className': ${class} })
                    #end
                  #end
                #elseif (${typeMap[$response.format]})
                  #set ($returnBean = { 'className': ${typeMap[$response.format]} })
                #elseif (${typeMap[$response.type]})
                  #set ($returnBean = { 'className': ${typeMap[$response.type]} })
                #elseif ($response.schema && $response.schema['$ref'])
                  #set ($definitionKey = $response.schema['$ref'].replace('#/definitions/', '')))
                  #set ($returnProperties = $definitionMap[$scriptEngine.invokeFunction('definitionKey', $definitionKey)].properties)
                  #if (!$returnProperties.empty)
                    #processRemoteApiBean('return', $api, $returnProperties)
                    #set ($returnBean = { 'package': "${request.package}.${schemePackage}.${subPackage}", 'className': ${class} })
                  #end
                #end
              #end
              #keepRemoteApiBehavior($api, $pathVariables, $paramBean, $returnBean)
            #end
          #end
        #end
      #end
    #end
    #processRemoteApiBhv()
  #end
#end
#end

#macro(mkdir, $path)
  $manager.makeDirectory($path)
#end

#macro(generate, $src, $dest)
  $generator.parse($src, $dest, "", "")
  $request.info("generate('${path}')")
#end

#macro(generateEx, $src, $dest)
  #if (!$files.file(${generator.outputPath},$dest).exists())
    $generator.parse($src, $dest, "", "")
    $request.info("generate('${path}')")
  #end
#end

##################################################
## process remote api bean.
##################################################
#macro(processRemoteApiBean, $type, $api, $properties_)
  #set ($subPackage = $scriptEngine.invokeFunction('beanSubPackage', $api))
  #set ($class = $scriptEngine.invokeFunction("${type}ClassName", $api))
  #set ($extendsClass = '')
  #set ($implementsClasses = '')
  #set ($extendsClass = $scriptEngine.eval("${type}ExtendsClass"))
  #set ($implementsClasses = $scriptEngine.eval("${type}ImplementsClasses"))
  #set ($path = "${request.generateDirPath}${schemePackage.replaceAll('\.', '/')}/${subPackage.replaceAll('\.', '/')}/${class.replaceAll('\.', '/')}.java")
  #set ($properties = $properties_)
  #set ($beanPurposeType = $type)
  #set ($remoteApiExp = "${api.httpMethod.toUpperCase()} ${api.url}")
  #mkdir($path)
  #generate("./remoteapi/RemoteApiBean.vm", $path)
#end

##################################################
## keep remote api behavior.
##################################################
#macro(keepRemoteApiBehavior, $api, $pathVariables, $paramBean, $returnBean)
  #set ($subPackage = $scriptEngine.invokeFunction('behaviorSubPackage', $api))
  #set ($class = $scriptEngine.invokeFunction('bsBehaviorClassName', $api))
  #if (!$bsBehaviorMap.containsKey("${schemePackage}.${subPackage}.${class}")) {
      $bsBehaviorMap.put("${schemePackage}.${subPackage}.${class}", { 'subPackage': ${subPackage}, 'class': ${class}, 'methodList': [] })
  #end
  $bsBehaviorMap.get("${schemePackage}.${subPackage}.${class}").methodList.add({ 'api': $api, 'pathVariables': $pathVariables, 'paramBean': $paramBean, 'returnBean': $returnBean })
  #set ($baseSubPackage = "${schemePackage}.${subPackage}")
  #set ($baseClass = $class)
  #set ($subPackage = $scriptEngine.invokeFunction('behaviorSubPackage', $api))
  #set ($class = $scriptEngine.invokeFunction('exBehaviorClassName', $api)))
  $exBehaviorMap.put("${schemePackage}.${subPackage}.${class}", { 'subPackage': ${subPackage}, 'class': ${class}, 'baseSubPackage': ${baseSubPackage}, 'baseClass': ${baseClass} })
#end

##################################################
## process remote api bhv.
##################################################
#macro(processRemoteApiBhv)
  #if ($scriptEngine.eval('behaviorClassGeneration'))
    #set ($abstractBehaviorClassName = $scriptEngine.invokeFunction('abstractBehaviorClassName', $scheme))
    #set ($path = "${request.generateDirPath}${schemePackage.replaceAll('\.', '/')}/${abstractBehaviorClassName.replaceAll('\.', '/')}.java")
    #mkdir($path)
    #generateEx("./remoteapi/RemoteApiAbstractBehavior.vm", $path)

    #foreach($bsBehavior in $bsBehaviorMap.values())
      #set ($subPackage = ${bsBehavior['subPackage']})
      #set ($class = $bsBehavior['class'])
      #set ($methodList = $bsBehavior['methodList'])
      #set ($remoteApiExp = $subPackage)
      #set ($path = "${request.generateDirPath}${schemePackage.replaceAll('\.', '/')}/${subPackage.replaceAll('\.', '/')}/${class.replaceAll('\.', '/')}.java")
      #mkdir($path)
      #generate("./remoteapi/RemoteApiBsBehavior.vm", $path)
    #end

    #foreach($exBehavior in $exBehaviorMap.values())
      #set ($subPackage = ${exBehavior['subPackage']})
      #set ($class = $exBehavior['class'])
      #set ($baseSubPackage = ${exBehavior['baseSubPackage']})
      #set ($baseClass = $exBehavior['baseClass'])
      #set ($remoteApiExp = $subPackage)
      #set ($path = "${request.generateDirPath}${schemePackage.replaceAll('\.', '/')}/${subPackage.replaceAll('\.', '/')}/${class.replaceAll('\.', '/')}.java")
      #mkdir($path)
      #generateEx("./remoteapi/RemoteApiExBehavior.vm", $path)
    #end

    #if ($manager.isTargetContainerLastaDi())
      #set ($path = $scriptEngine.invokeFunction('diXmlPath', $scheme, $request.resourceFile))
      #mkdir($path)
      #generate("./remoteapi/container/lastadi/RemoteApiDiXml.vm", $path)
    #end
    #if ($manager.isTargetContainerSeasar())
      #set ($path = $scriptEngine.invokeFunction('diconPath', $scheme, $request.resourceFile))
      #mkdir($path)
      #generate("./remoteapi/container/seasar/RemoteApiDicon.vm", $path)
    #end
  #end
#end

##################################################
## adjust type.
##################################################
#macro(adjustType, $type, $class)
#set ($adjustType = ${type})
#set ($index = ${adjustType.lastIndexOf('.')})
#if ($index != -1)
#set ($index = $index + 1)
#set ($adjustType = ${adjustType.substring($index)})
#end
#set ($adjustType = $adjustType.replaceAll("^.*\$", ''))
#set ($adjustType = $scriptEngine.invokeFunction('nestClassName', $scheme, $adjustType))
#end

##################################################
## load type map.
##################################################
#macro(loadTypeMap)
  #set ($typeMap = {})
  $typeMap.put('object', 'Object')
  $typeMap.put('int32', 'Integer')
  $typeMap.put('int64', 'Long')
  $typeMap.put('float', 'Float')
  $typeMap.put('double', 'Double')
  $typeMap.put('string', 'String')
  $typeMap.put('byte', 'byte[]')
  $typeMap.put('boolean', 'Boolean')
  $typeMap.put('date', 'java.time.LocalDate')
  $typeMap.put('date-time', 'java.time.LocalDateTime')
  $typeMap.put('array', 'java.util.List')
  #if ($scriptEngine.eval('yourCollections'))
    $typeMap.put('array', $scriptEngine.eval('yourCollections'))
  #end
#end
