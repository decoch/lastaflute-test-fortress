##
## Copyright 2017-2017 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
#foreach ($request in $requestList)
#if ($request.isResourceTypeSwagger())
  ## only swagger requests here
  #set ($optionMap = $request.optionMap)
  $request.enableOutputDirectory()
  $manager.makeDirectory($request.generateDirPath)

  ## use JavaScript for rule settings
  #set ($scriptEngine = $manager.createJavaScriptEngine())
  $scriptEngine.eval('load("./freegen/remoteapi/RemoteApiRule.js");')
  #if ($optionMap.ruleJsPath && $optionMap.ruleJsPath != '')
    ## load application rule settings if exists
    $scriptEngine.eval("load('$optionMap.ruleJsPath');")
  #end

  ## load java property type mapping
  #loadTypeMap()

  #set ($resourceTypeRemoteApi = "RemoteApi")
  #if ($request.requestName.startsWith($resourceTypeRemoteApi))
    ## only remote api requests here
    $manager.info("...Generating remote api: ${request.requestName}")

    ## keep definitions in swagger.json for "$ref" handling
    #foreach($swaggerJsonEntry in $optionMap.jsonMap.entrySet())
      #if ($swaggerJsonEntry.key == 'definitions')
        #set ($definitionMap = $swaggerJsonEntry.value)
      #end
    #end

    ## schema name is from part of FreeGen request name e.g. RemoteApiSeaLand => SeaLand
    #set ($scheme = $request.requestName.replace($resourceTypeRemoteApi, ''))
    #set ($schemePackage = $scriptEngine.invokeFunction('schemePackage', $scheme))
    #set ($bsBehaviorMap = {})
    #set ($exBehaviorMap = {})

    ## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
    ## loop swagger.json's first-level elements e.g. swagger, info, host, basePath, tags, paths, ...
    ## _/_/_/_/_/_/_/_/_/_/
    #foreach($swaggerJsonEntry in $optionMap.jsonMap.entrySet())
      #if ($swaggerJsonEntry.key == 'paths')
        #set ($pathMap = $swaggerJsonEntry.value)

        ## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
        ## loop paths's elements, per one API URL: e.g. /sea/land
        ## _/_/_/_/_/_/_/_/_/_/
        #foreach($pathEntry in $pathMap.entrySet())

          ## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
          ## loop path's elements, per HTTP method e.g. get, post, ...
          ## _/_/_/_/_/_/_/_/_/_/
          #foreach($methodEntry in $pathEntry.value.entrySet())
            #set ($multipleHttpMethod = $pathEntry.value.size() > 1)
            #set ($api = { 'scheme': $scheme, 'url': $pathEntry.key, 'httpMethod': $methodEntry.key, 'multipleHttpMethod': $multipleHttpMethod, 'consumes': $methodEntry.value.consumes, 'produces': $methodEntry.value.produces })
            #if ($scriptEngine.invokeFunction('target', $api))
              #set ($api.url = $scriptEngine.invokeFunction('url', $api))

              ## +------------------------+
              ## |                        |
              ## | Generate 'Param' beans |
              ## |                        |
              ## +------------------------+
              #set ($bodyProperties = {})
              #set ($pathVariables = {})
              #set ($queryProperties = {})
              #set ($formDataProperties = {})
              #set ($paramBean = {})
              #set ($returnBean = {})

              ## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
              ## loop parameters's elements, e.g. in, name, description, required, schema, ...
              ## _/_/_/_/_/_/_/_/_/_/
              #foreach($parameter in $methodEntry.value['parameters'])
                #if ($parameter.in == 'body')
                  #set ($definitionKey = '')
                  #if ($parameter.schema && $parameter.schema['$ref'])
                    #set ($definitionKey = $parameter.schema['$ref'].replace('#/definitions/', '')))
                    #set ($bodyProperties = $definitionMap[$scriptEngine.invokeFunction('definitionKey', $definitionKey)].properties)
                    #foreach($bodyPropertyEntry in $bodyProperties.entrySet())
                      #set ($bodyPropertyEntry.value.required = $definitionMap[$scriptEngine.invokeFunction('definitionKey', $definitionKey)].required.contains($bodyPropertyEntry.key))
                    #end
                    #processRemoteApiBean('param', $api, $bodyProperties)
                    #set ($paramBean = { 'package': "${request.package}.${schemePackage}.${subPackage}", 'className': ${class}, 'in': 'body' })
                  #end
                #elseif ($parameter.in == 'path')
                  $pathVariables.put($parameter.name, $parameter)
                #elseif ($parameter.in == 'query')
                  $queryProperties.put($parameter.name, $parameter)
                #elseif ($parameter.in == 'formData')
                  $formDataProperties.put($parameter.name, $parameter)
                #end
              #end
              #if ($queryProperties.size() != 0)
                #processRemoteApiBean('param', $api, $queryProperties)
                #set ($paramBean = { 'package': "${request.package}.${schemePackage}.${subPackage}", 'className': ${class}, 'in': 'query' }) })
              #end
              #if ($formDataProperties.size() != 0)
                #processRemoteApiBean('param', $api, $formDataProperties)
                #set ($paramBean = { 'package': "${request.package}.${schemePackage}.${subPackage}", 'className': ${class}, 'in': 'formData' }) })
              #end

              ## +-------------------------+
              ## |                         |
              ## | Generate 'Return' beans |
              ## |                         |
              ## +-------------------------+
              #set ($returnProperties = {})

              ## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
              ## loop responses's elements, e.g. in, name, description, required, schema, ...
              ## _/_/_/_/_/_/_/_/_/_/
              #foreach($responseEntry in $methodEntry.value['responses'].entrySet())
                #set ($response = $responseEntry.value)
                #if ($response.schema)
                  #if ($response.schema.type == 'array')
                    #if (${typeMap[$response.schema.items.format]})
                      #set ($returnBean = { 'className': "${typeMap[$response.schema.items.format]}", 'array': true })
                    #elseif (${typeMap[$response.schema.items.type]})
                      #set ($returnBean = { 'className': "${typeMap[$response.schema.items.type]}", 'array': true })
                    #else
                      ## 'schema' -> 'items' -> '$ref' if array
                      #set ($definitionKey = $response.schema['items']['$ref'].replace('#/definitions/', '')))
                      #set ($returnProperties = $definitionMap[$scriptEngine.invokeFunction('definitionKey', $definitionKey)].properties)
                      #if (!$returnProperties.empty)
                        #foreach($returnPropertyEntry in $returnProperties.entrySet())
                          #set ($returnPropertyEntry.value.required = $definitionMap[$scriptEngine.invokeFunction('definitionKey', $definitionKey)].required.contains($returnPropertyEntry.key))
                        #end
                        #processRemoteApiBean('return', $api, $returnProperties)
                        #set ($returnBean = { 'package': "${request.package}.${schemePackage}.${subPackage}", 'className': "${class}", 'array': true})
                      #end
                    #end
                  #elseif (${typeMap[$response.schema.format]})
                    #set ($returnBean = { 'className': ${typeMap[$response.schema.format]} })
                  #elseif (${typeMap[$response.schema.type]})
                    #set ($returnBean = { 'className': ${typeMap[$response.schema.type]} })
                  #elseif ($response.schema['$ref'])
                    ## 'schema' -> '$ref' if normally
                    #set ($definitionKey = $response.schema['$ref'].replace('#/definitions/', '')))
                    #set ($returnProperties = $definitionMap[$scriptEngine.invokeFunction('definitionKey', $definitionKey)].properties)
                    #if (!$returnProperties.empty)
                      #foreach($returnPropertyEntry in $returnProperties.entrySet())
                        #set ($returnPropertyEntry.value.required = $definitionMap[$scriptEngine.invokeFunction('definitionKey', $definitionKey)].required.contains($returnPropertyEntry.key))
                      #end
                      #processRemoteApiBean('return', $api, $returnProperties)
                      #set ($returnBean = { 'package': "${request.package}.${schemePackage}.${subPackage}", 'className': ${class} })
                    #end
                  #end
                #end
              #end
              #keepRemoteApiBehavior($api, $pathVariables, $paramBean, $returnBean)
            #end
          #end
        #end
      #end
    #end
    #processRemoteApiBhv()
  #end
#end
#end

#macro(mkdir, $path)
  $manager.makeDirectory($path)
#end

#macro(generate, $src, $dest)
  $generator.parse($src, $dest, "", "")
  $request.info("generate('${path}')")
#end

#macro(generateEx, $src, $dest)
  #if (!$files.file(${generator.outputPath},$dest).exists())
    $generator.parse($src, $dest, "", "")
    $request.info("generate('${path}')")
  #end
#end

## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
## Process remote api bean. (generating class)
## @param type The bean role type. e.g. param, return (NotNull)
## @param api The information of api. (NotNull)
## @param properties_ The information of property for the bean. (NotNull)
## _/_/_/_/_/_/_/_/_/_/
#macro(processRemoteApiBean, $type, $api, $properties_)
  #set ($subPackage = '')
  #set ($subPackage = $scriptEngine.invokeFunction('beanSubPackage', $api))
  #set ($class = $scriptEngine.invokeFunction("${type}ClassName", $api))
  #set ($extendsClass = '')
  #set ($implementsClasses = '')
  #set ($extendsClass = $scriptEngine.eval("${type}ExtendsClass"))
  #set ($implementsClasses = $scriptEngine.eval("${type}ImplementsClasses"))
  #set ($path = "${request.generateDirPath}${schemePackage.replaceAll('\.', '/')}#if ($subPackage && $subPackage != '')/${subPackage.replaceAll('\.', '/')}#end/${class.replaceAll('\.', '/')}.java")
  #set ($properties = $properties_)
  #set ($beanPurposeType = $type)
  #set ($remoteApiExp = "${api.httpMethod.toUpperCase()} ${api.url}")
  #mkdir($path)
  #generate("./remoteapi/RemoteApiBean.vm", $path)
#end

## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
## Keep information of remote api behavior.
## @param api The information of api. (NotNull)
## @param pathVariables The array of path variables. (NotNull)
## @param paramBean The information of param bean. (NotNull)
## @param returnBean The information of return bean. (NotNull)
## @return bsBehaviorMap The map of base behavior information. (NotNull)
## @return exBehaviorMap The map of extended behavior information. (NotNull)
## _/_/_/_/_/_/_/_/_/_/
#macro(keepRemoteApiBehavior, $api, $pathVariables, $paramBean, $returnBean)
  #set ($subPackage = '')
  #set ($subPackage = $scriptEngine.invokeFunction('behaviorSubPackage', $api))
  #set ($class = $scriptEngine.invokeFunction('bsBehaviorClassName', $api))
  #if (!$bsBehaviorMap.containsKey("${schemePackage}.${subPackage}.${class}")) {
      $bsBehaviorMap.put("${schemePackage}.${subPackage}.${class}", { 'subPackage': ${subPackage}, 'class': ${class}, 'methodList': [] })
  #end
  $bsBehaviorMap.get("${schemePackage}.${subPackage}.${class}").methodList.add({ 'api': $api, 'pathVariables': $pathVariables, 'paramBean': $paramBean, 'returnBean': $returnBean })
  #set ($baseSubPackage = "${schemePackage}.${subPackage}")
  #set ($baseClass = $class)
  #set ($subPackage = $scriptEngine.invokeFunction('behaviorSubPackage', $api))
  #set ($class = $scriptEngine.invokeFunction('exBehaviorClassName', $api)))
  $exBehaviorMap.put("${schemePackage}.${subPackage}.${class}", { 'subPackage': ${subPackage}, 'class': ${class}, 'baseSubPackage': ${baseSubPackage}, 'baseClass': ${baseClass} })
#end

## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
## Process remote api behavior. (generating class)
## Also generate DI xml.
## _/_/_/_/_/_/_/_/_/_/
#macro(processRemoteApiBhv)
  #if ($scriptEngine.eval('behaviorClassGeneration'))
    #set ($abstractBehaviorClassName = $scriptEngine.invokeFunction('abstractBehaviorClassName', $scheme))
    #set ($path = "${request.generateDirPath}${schemePackage.replaceAll('\.', '/')}/${abstractBehaviorClassName.replaceAll('\.', '/')}.java")
    #mkdir($path)
    #generateEx("./remoteapi/RemoteApiAbstractBehavior.vm", $path)

    #foreach($bsBehavior in $bsBehaviorMap.values())
      #set ($subPackage = ${bsBehavior['subPackage']})
      #set ($class = $bsBehavior['class'])
      #set ($methodList = $bsBehavior['methodList'])
      #set ($remoteApiExp = $subPackage)
      #set ($path = "${request.generateDirPath}${schemePackage.replaceAll('\.', '/')}#if ($subPackage && $subPackage != '')/${subPackage.replaceAll('\.', '/')}#end/${class.replaceAll('\.', '/')}.java")
      #mkdir($path)
      #generate("./remoteapi/RemoteApiBsBehavior.vm", $path)
    #end

    #foreach($exBehavior in $exBehaviorMap.values())
      #set ($subPackage = ${exBehavior['subPackage']})
      #set ($class = $exBehavior['class'])
      #set ($baseSubPackage = ${exBehavior['baseSubPackage']})
      #set ($baseClass = $exBehavior['baseClass'])
      #set ($remoteApiExp = $subPackage)
      #set ($path = "${request.generateDirPath}${schemePackage.replaceAll('\.', '/')}#if ($subPackage && $subPackage != '')/${subPackage.replaceAll('\.', '/')}#end/${class.replaceAll('\.', '/')}.java")
      #mkdir($path)
      #generateEx("./remoteapi/RemoteApiExBehavior.vm", $path)
    #end

    #if ($manager.isTargetContainerLastaDi())
      #set ($path = $scriptEngine.invokeFunction('diXmlPath', $scheme, $request.resourceFile))
      #mkdir($path)
      #generate("./remoteapi/container/lastadi/RemoteApiDiXml.vm", $path)
    #end
    #if ($manager.isTargetContainerSeasar())
      #set ($path = $scriptEngine.invokeFunction('diconPath', $scheme, $request.resourceFile))
      #mkdir($path)
      #generate("./remoteapi/container/seasar/RemoteApiDicon.vm", $path)
    #end
  #end
#end

## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
## Adjust java type of e.g. property. e.g. java.util.List to List
## @param type The type of java type. (NotNull)
## @return adjustType The filtered expression of the type.
## _/_/_/_/_/_/_/_/_/_/
#macro(adjustType, $type)
#set ($adjustType = ${type})
#set ($index = ${adjustType.lastIndexOf('.')})
#if ($index != -1)
#set ($index = $index + 1)
#set ($adjustType = ${adjustType.substring($index)})
#end
#set ($adjustType = $adjustType.replaceAll("^.*\$", ''))
#set ($adjustType = $scriptEngine.invokeFunction('nestClassName', $scheme, $adjustType))
#end

## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
## Load java property type mapping. (initialization)
## @return typeMap The map of type conversion, swagger type to java type. (NotNull)
## _/_/_/_/_/_/_/_/_/_/
#macro(loadTypeMap)
  #set ($typeMap = {})
  $typeMap.put('object', 'Object')
  $typeMap.put('int32', 'Integer')
  $typeMap.put('int64', 'Long')
  $typeMap.put('float', 'Float')
  $typeMap.put('double', 'Double')
  $typeMap.put('string', 'String')
  $typeMap.put('byte', 'byte[]')
  $typeMap.put('boolean', 'Boolean')
  $typeMap.put('date', 'java.time.LocalDate')
  $typeMap.put('date-time', 'java.time.LocalDateTime')
  $typeMap.put('file', 'org.lastaflute.web.ruts.multipart.MultipartFormFile')
  $typeMap.put('array', 'java.util.List')
  #set ($yourCollections = $scriptEngine.eval('yourCollections'))
  #if ($yourCollections)
    $typeMap.put('array', $yourCollections)
  #end
#end
