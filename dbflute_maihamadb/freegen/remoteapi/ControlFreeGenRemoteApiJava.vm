##
## Copyright 2014-2016 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
#set ($scriptEngine = $requestList.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript'))
#foreach ($request in $requestList)
#set ($tableMap = $request.tableMap)
$request.enableOutputDirectory()
$manager.makeDirectory($request.generateDirPath)

#if ($request.isResourceTypeJsonSchema())
  #loadTypeMap()
  #set ($resourceTypeRemoteApi = "RemoteApi")
  #if ($request.requestName.startsWith($resourceTypeRemoteApi))
    $manager.info("gen remote api: ${request.requestName}")
    $scriptEngine.eval("var definitionKey = $tableMap.definitionKey")
    $scriptEngine.eval("var subPackage = $tableMap.subPackage")
    $scriptEngine.eval("var abstractBehaviorClassName = $tableMap.abstractBehaviorClassName")
    $scriptEngine.eval("var bsBehaviorClassName = $tableMap.bsBehaviorClassName")
    $scriptEngine.eval("var exBehaviorClassName = $tableMap.exBehaviorClassName")
    $scriptEngine.eval("var requestClassName = $tableMap.requestClassName")
    $scriptEngine.eval("var responseClassName = $tableMap.responseClassName")
    $scriptEngine.eval("var nestClassName = $tableMap.nestClassName")
    $scriptEngine.eval("var fieldName = $tableMap.fieldName")

    #set ($jsonFreeAgent = $request.getClass().forName("org.dbflute.logic.manage.freegen.table.json.DfJsonFreeAgent").newInstance())
    #set ($swaggerJsonMap = $jsonFreeAgent.decodeJsonMap($request.resourceName, $tableMap.swaggerJsonPath))
    #foreach($swaggerJsonEntry in $swaggerJsonMap.entrySet())
      #if ($swaggerJsonEntry.key == 'definitions')
        #set ($definitionMap = $swaggerJsonEntry.value)
      #end
    #end

    #set ($scheme = $request.requestName.replace($resourceTypeRemoteApi, ''))
    #set ($schemePackage = $manager.decamelize($request.requestName.replace($resourceTypeRemoteApi, '')).replaceAll('_', '.').toLowerCase())
    #set ($bsBehaviorMap = {})
    #set ($exBehaviorMap = {})
    #foreach($swaggerJsonEntry in $swaggerJsonMap.entrySet())
      #if ($swaggerJsonEntry.key == 'paths')
        #set ($pathMap = $swaggerJsonEntry.value)
        #foreach($pathEntry in $pathMap.entrySet())
          #if ($pathEntry.key.matches($tableMap.targetUrlRegex))
            #set ($multipleHttpMethod = $pathEntry.value.size() != 1)
            #foreach($methodEntry in $pathEntry.value.entrySet())
              ## request
              #set ($bodyProperties = {})
              #set ($queryProperties = {})
              #set ($formDataProperties = {})
              #set ($requestBean = {})
              #set ($responseBean = {})
              #foreach($parameter in $methodEntry.value['parameters'])
                #if ($parameter.in == 'body')
                  #set ($definitionKey = '')
                  #if ($parameter.schema && $parameter.schema['$ref'])
                    #set ($definitionKey = $parameter.schema['$ref'].replace('#/definitions/', '')))
                    #set ($bodyProperties = $definitionMap[$scriptEngine.invokeFunction('definitionKey', $definitionKey)].properties)
                    #processRemoteApiBean('request', $pathEntry.key, $methodEntry.key, $multipleHttpMethod, $bodyProperties)
                    #set ($requestBean = { 'package': "${request.package}.${subPackage}", 'className': ${class}, 'in': 'body' })
                  #end
                #elseif ($parameter.in == 'query')
                  $queryProperties.put($parameter.name, $parameter)
                #elseif ($parameter.in == 'formData')
                  $formDataProperties.put($parameter.name, $parameter)
                #end
              #end
              #if ($queryProperties.size() != 0)
                #processRemoteApiBean('request', $pathEntry.key, $methodEntry.key, $multipleHttpMethod, $queryProperties)
                #set ($requestBean = { 'package': "${request.package}.${subPackage}", 'className': ${class}, 'in': 'query' }) })
              #end
              #if ($formDataProperties.size() != 0)
                #processRemoteApiBean('request', $pathEntry.key, $methodEntry.key, $multipleHttpMethod, $formDataProperties)
                #set ($requestBean = { 'package': "${request.package}.${subPackage}", 'className': ${class}, 'in': 'formData' }) })
              #end

              ## response
              #set ($responseProperties = {})
              #foreach($responseEntry in $methodEntry.value['responses'].entrySet())
                #set ($definitionKey = '')
                #if ($responseEntry.value.schema && $responseEntry.value.schema['$ref'])
                  #set ($definitionKey = $responseEntry.value.schema['$ref'].replace('#/definitions/', '')))
                  #set ($responseProperties = $definitionMap[$scriptEngine.invokeFunction('definitionKey', $definitionKey)].properties)
                  #if (!$responseProperties.empty)
                    #processRemoteApiBean('response', $pathEntry.key, $methodEntry.key, $multipleHttpMethod, $responseProperties)
                    #set ($responseBean = { 'package': "${request.package}.${subPackage}", 'className': ${class} })
                  #end
                #end
              #end
              #keepRemoteApiBehavior($pathEntry.key, $methodEntry.key, $multipleHttpMethod, $requestBean, $responseBean)
            #end
          #end
        #end
      #end
    #end

    #if ($tableMap.behaviorClassGeneration == 'true')
      #set ($abstractBehaviorSubPackage = "${schemePackage}")
      #set ($abstractBehaviorClassName = $scriptEngine.invokeFunction('abstractBehaviorClassName', $scheme))
      #set ($path = "${request.generateDirPath}${abstractBehaviorSubPackage.replaceAll('\.', '/')}/${abstractBehaviorClassName.replaceAll('\.', '/')}.java")
      #mkdir($path)
      #generateEx("./remoteapi/RemoteApiAbstractBehavior.vm", $path)

      #foreach($bsBehavior in $bsBehaviorMap.values())
        #set ($subPackage = ${bsBehavior['subPackage']})
        #set ($class = $bsBehavior['class'])
        #set ($methodList = $bsBehavior['methodList'])
        #set ($path = "${request.generateDirPath}${subPackage.replaceAll('\.', '/')}/${class.replaceAll('\.', '/')}.java")
        #mkdir($path)
        #generate("./remoteapi/RemoteApiBsBehavior.vm", $path)
      #end

      #foreach($exBehavior in $exBehaviorMap.values())
        #set ($subPackage = ${exBehavior['subPackage']})
        #set ($class = $exBehavior['class'])
        #set ($baseSubPackage = ${exBehavior['baseSubPackage']})
        #set ($baseClass = $exBehavior['baseClass'])
        #set ($path = "${request.generateDirPath}${subPackage.replaceAll('\.', '/')}/${class.replaceAll('\.', '/')}.java")
        #mkdir($path)
        #generateEx("./remoteapi/RemoteApiExBehavior.vm", $path)
      #end
    #end
  #end
#end
#end

#macro(mkdir, $path)
  $manager.makeDirectory($path)
#end

#macro(generate, $src, $dest)
  $generator.parse($src, $dest, "", "")
  $request.info("generate('${path}')")
#end

#macro(generateEx, $src, $dest)
  #if (!$files.file(${generator.outputPath},$dest).exists())
    $generator.parse($src, $dest, "", "")
    $request.info("generate('${path}')")
  #end
#end

#macro(keepRemoteApiBehavior, $url, $httpMethod, $multipleHttpMethod, $requestBean, $responseBean)
  #set ($apiName = $url.replaceAll('_', '').replaceAll('^/', '').replaceAll('/$', '').replaceAll('/\{.*?\}', '').replaceAll('/', '.'))
  #set ($subPackage = $apiName.toLowerCase().replaceAll('^([^.]*)\.(.+)', '$1'))
  #set ($methodName = $manager.initUncap($manager.camelize($apiName.replaceAll('^([^.]*)\.(.+)', '$2').replaceAll('\.', '_'))))
  #set ($subPackage = $scriptEngine.invokeFunction('subPackage', $subPackage))
  #set ($class = $scriptEngine.invokeFunction('bsBehaviorClassName', $scheme, $manager.camelize($subPackage.replaceAll('\.', '_'))))
  #set ($subPackage = "${schemePackage}.${subPackage}")
  #if (!$bsBehaviorMap.containsKey("${subPackage}.${class}")) {
      $bsBehaviorMap.put("${subPackage}.${class}", { 'subPackage': ${subPackage}, 'class': ${class}, 'methodList': [] })
  #end
  $bsBehaviorMap.get("${subPackage}.${class}").methodList.add({ 'name': $methodName, 'url': $url, 'httpMethod': $manager.initCap($httpMethod), 'multipleHttpMethod': $multipleHttpMethod, 'requestBean': $requestBean, 'responseBean': $responseBean })
  #set ($baseSubPackage = $subPackage)
  #set ($baseClass = $class)
  #set ($apiName = $url.replaceAll('_', '').replaceAll('^/', '').replaceAll('/$', '').replaceAll('/\{.*?\}', '').replaceAll('/', '.'))
  #set ($subPackage = $apiName.toLowerCase().replaceAll('^([^.]*)\.(.+)', '$1'))
  #set ($subPackage = $scriptEngine.invokeFunction('subPackage', $subPackage))
  #set ($class = $scriptEngine.invokeFunction('exBehaviorClassName', $scheme, $manager.camelize($subPackage.replaceAll('\.', '_'))))
  #set ($subPackage = "${schemePackage}.${subPackage}")
  $exBehaviorMap.put("${subPackage}.${class}", { 'subPackage': ${subPackage}, 'class': ${class}, 'baseSubPackage': ${baseSubPackage}, 'baseClass': ${baseClass} })
#end

#macro(processRemoteApiBean, $type, $url, $httpMethod, $multipleHttpMethod, $properties_)
  #set ($subPackage = ${url.replaceAll('_', '').replaceAll('^/', '').replaceAll('/$', '').replaceAll('/\{.*?\}', '').replaceAll('/', '.').toLowerCase()})
  #set ($subPackage = $scriptEngine.invokeFunction('subPackage', $subPackage))
  #set ($class = $scriptEngine.invokeFunction("${type}ClassName", $scheme, $manager.camelize($subPackage.replaceAll('\.', '_')), $manager.initCap($httpMethod), $multipleHttpMethod))
  #set ($subPackage = "${schemePackage}.${subPackage}")
  #set ($extendsClass = '')
  #set ($implementsClasses = '')
  #set ($extendsClass = $tableMap["${type}ExtendsClass"])
  #set ($implementsClasses = $tableMap["${type}ImplementsClasses"])
  #set ($path = "${request.generateDirPath}${subPackage.replaceAll('\.', '/')}/${class.replaceAll('\.', '/')}.java")
  #set ($properties = $properties_)
  #mkdir($path)
  #generate("./remoteapi/RemoteApiBean.vm", $path)
#end

#macro(adjustType, $type, $class)
#set ($adjustType = ${type})
#set ($index = ${adjustType.lastIndexOf('.')})
#if ($index != -1)
#set ($index = $index + 1)
#set ($adjustType = ${adjustType.substring($index)})
#end
#set ($adjustType = $adjustType.replaceAll("^.*\$", ''))
#set ($adjustType = $scriptEngine.invokeFunction('nestClassName', $scheme, $adjustType))
#end

#macro(loadTypeMap)
  #set ($typeMap = {})
  $typeMap.put('int32', 'Integer')
  $typeMap.put('int64', 'Long')
  $typeMap.put('float', 'Float')
  $typeMap.put('double', 'Double')
  $typeMap.put('string', 'String')
  $typeMap.put('byte', 'byte[]')
  $typeMap.put('boolean', 'Boolean')
  $typeMap.put('date', 'java.time.LocalDate')
  $typeMap.put('date-time', 'java.time.LocalDateTime')
  $typeMap.put('array', 'java.util.List')
  #if ($tableMap.yourCollections)
    $typeMap.put('array', $tableMap.yourCollections)
  #end
#end
