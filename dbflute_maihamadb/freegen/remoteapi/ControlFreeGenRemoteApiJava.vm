##
## Copyright 2017-2017 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
#foreach ($request in $requestList)
#if ($request.isResourceTypeSwagger())
  ## only swagger requests here
  #set ($optionMap = $request.optionMap)
  $request.enableOutputDirectory()
  $manager.makeDirectory($request.generateDirPath)

  ## use JavaScript for rule settings
  #set ($scriptEngine = $manager.createJavaScriptEngine())
  $scriptEngine.put('manager', $manager);
  $scriptEngine.eval('load("./freegen/remoteapi/RemoteApiRule.js");')
  #if ($optionMap.ruleJsPath && $optionMap.ruleJsPath != '')
    ## load application rule settings if exists
    $scriptEngine.eval("load('$optionMap.ruleJsPath');")
  #end
  #set ($rule = $scriptEngine.get('remoteApiRule'))

  ## load java property type mapping
  #set ($typeMap = {})
  $typeMap.putAll($scriptEngine.invokeMethod($rule, 'typeMap'))

  ## only remote api requests here
  $manager.info("...Generating remote api: ${request.requestName}")

  ## schema name is from part of FreeGen request name e.g. RemoteApiSeaLand => SeaLand
  #set ($scheme = $scriptEngine.invokeMethod($rule, 'scheme', $request))
  #set ($schemePackage = $scriptEngine.invokeMethod($rule, 'schemePackage', $scheme))
  #set ($bsBehaviorMap = {})
  #set ($exBehaviorMap = {})

  ## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
  ## swagger.json's key
  ## _/_/_/_/_/_/_/_/_/_/
  #set ($pathMap = {})
  #set ($pathMap = $optionMap.jsonMap['paths'])
  #set ($definitionMap = {})
  #set ($definitionMap = $optionMap.jsonMap['definitions'])

  ## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
  ## loop paths's elements, per one API URL: e.g. /sea/land
  ## _/_/_/_/_/_/_/_/_/_/
  #foreach($pathEntry in $pathMap.entrySet())

    ## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
    ## loop path's elements, per HTTP method e.g. get, post, ...
    ## _/_/_/_/_/_/_/_/_/_/
    #foreach($methodEntry in $pathEntry.value.entrySet())
      #set ($multipleHttpMethod = $pathEntry.value.size() > 1)
      #set ($api = { 'scheme': $scheme, 'url': $pathEntry.key, 'httpMethod': $methodEntry.key, 'multipleHttpMethod': $multipleHttpMethod, 'consumes': $methodEntry.value.consumes, 'produces': $methodEntry.value.produces })
      #if ($scriptEngine.invokeMethod($rule, 'target', $api))
        #set ($api.url = $scriptEngine.invokeMethod($rule, 'url', $api))

        ## +------------------------+
        ## |                        |
        ## | Generate 'Param' beans |
        ## |                        |
        ## +------------------------+
        #set ($pathVariables = {})
        #set ($queryProperties = {})
        #set ($formDataProperties = {})
        #set ($bodyProperties = {})
        #set ($paramBean = {})

        ## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
        ## loop parameters's elements, e.g. in, name, description, required, schema, ...
        ## _/_/_/_/_/_/_/_/_/_/
        #foreach($parameter in $methodEntry.value['parameters'])
          #if ($parameter.in == 'path')
            $pathVariables.put($parameter.name, $parameter)
          #elseif ($parameter.in == 'query')
            $queryProperties.put($parameter.name, $parameter)
          #elseif ($parameter.in == 'formData')
            $formDataProperties.put($parameter.name, $parameter)
          #elseif ($parameter.in == 'body')
            #set ($definitionKey = '')
            #if ($parameter.schema && $parameter.schema['$ref'])
              #set ($definitionKey = $parameter.schema['$ref'].replace('#/definitions/', '')))
              #set ($bodyProperties = $definitionMap[$scriptEngine.invokeMethod($rule, 'definitionKey', $definitionKey)].properties)
              #foreach($bodyPropertyEntry in $bodyProperties.entrySet())
                #set ($bodyPropertyEntry.value.required = $definitionMap[$scriptEngine.invokeMethod($rule, 'definitionKey', $definitionKey)].required.contains($bodyPropertyEntry.key))
              #end
              #processRemoteApiBean('param', $api, $bodyProperties)
              #set ($paramBean = { 'package': ${data.package}, 'className': ${data.className}, 'in': 'body' })
            #end
          #end
        #end
        #if (!$queryProperties.isEmpty())
          #processRemoteApiBean('param', $api, $queryProperties)
          #set ($paramBean = { 'package': ${data.package}, 'className': ${data.className}, 'in': 'query' }) })
        #end
        #if (!$formDataProperties.isEmpty())
          #processRemoteApiBean('param', $api, $formDataProperties)
          #set ($paramBean = { 'package': ${data.package}, 'className': ${data.className}, 'in': 'formData' }) })
        #end

        ## +-------------------------+
        ## |                         |
        ## | Generate 'Return' beans |
        ## |                         |
        ## +-------------------------+
        #set ($returnProperties = {})
        #set ($returnBean = {})

        ## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
        ## loop responses's elements, e.g. in, name, description, required, schema, ...
        ## _/_/_/_/_/_/_/_/_/_/
        #foreach($responseEntry in $methodEntry.value['responses'].entrySet())
          #set ($response = $responseEntry.value)
          #if ($response.schema)
            #if ($response.schema.type == 'array')
              #if (${typeMap[$response.schema.items.format]})
                #set ($returnBean = { 'className': "${typeMap[$response.schema.items.format]}", 'array': true })
              #elseif (${typeMap[$response.schema.items.type]})
                #set ($returnBean = { 'className': "${typeMap[$response.schema.items.type]}", 'array': true })
              #else
                ## 'schema' -> 'items' -> '$ref' if array
                #set ($definitionKey = $response.schema['items']['$ref'].replace('#/definitions/', '')))
                #set ($returnProperties = $definitionMap[$scriptEngine.invokeMethod($rule, 'definitionKey', $definitionKey)].properties)
                #if (!$returnProperties.isEmpty())
                  #foreach($returnPropertyEntry in $returnProperties.entrySet())
                    #set ($returnPropertyEntry.value.required = $definitionMap[$scriptEngine.invokeMethod($rule, 'definitionKey', $definitionKey)].required.contains($returnPropertyEntry.key))
                  #end
                  #processRemoteApiBean('return', $api, $returnProperties)
                  #set ($returnBean = { 'package': ${data.package}, 'className': "${data.className}", 'array': true})
                #end
              #end
            #elseif (${typeMap[$response.schema.format]})
              #set ($returnBean = { 'className': ${typeMap[$response.schema.format]} })
            #elseif (${typeMap[$response.schema.type]})
              #set ($returnBean = { 'className': ${typeMap[$response.schema.type]} })
            #elseif ($response.schema['$ref'])
              ## 'schema' -> '$ref' if normally
              #set ($definitionKey = $response.schema['$ref'].replace('#/definitions/', '')))
              #set ($returnProperties = $definitionMap[$scriptEngine.invokeMethod($rule, 'definitionKey', $definitionKey)].properties)
              #if (!$returnProperties.isEmpty())
                #foreach($returnPropertyEntry in $returnProperties.entrySet())
                  #set ($returnPropertyEntry.value.required = $definitionMap[$scriptEngine.invokeMethod($rule, 'definitionKey', $definitionKey)].required.contains($returnPropertyEntry.key))
                #end
                #processRemoteApiBean('return', $api, $returnProperties)
                #set ($returnBean = { 'package': ${data.package}, 'className': ${data.className} })
              #end
            #end
          #end
        #end
        #keepRemoteApiBehavior($api, $pathVariables, $paramBean, $returnBean)
      #end
    #end
  #end
  #processRemoteApiBhv()
#end
#end

## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
## generate file.
## @param src src (NotNull)
## @param dest dest (NotNull)
## @param data data (NotNull)
## @param overwite overwite (NotNull)
## _/_/_/_/_/_/_/_/_/_/
#macro(generate, $src, $dest, $data, $overwite)
  #if (!$files.file(${generator.outputPath},$dest).exists() || $overwite)
    $manager.makeDirectory($dest)
    $generator.parse($src, $dest, "data", $data)
    $request.info("generate('${dest}')")
  #end
#end

## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
## Process remote api bean. (generating class)
## @param type The bean role type. e.g. param, return (NotNull)
## @param api The information of api. (NotNull)
## @param properties_ The information of property for the bean. (NotNull)
## _/_/_/_/_/_/_/_/_/_/
#macro(processRemoteApiBean, $type, $api, $properties_)
  #set ($subPackage = '')
  #set ($subPackage = $scriptEngine.invokeMethod($rule, 'beanSubPackage', $api))
  #set ($package = "${request.package}.${schemePackage}#if ($subPackage && $subPackage != '').${subPackage}#end")

  #set ($remoteApiBean = {})
  $remoteApiBean.put('api', $api)
  $remoteApiBean.put('package', $package)
  $remoteApiBean.put('className', $scriptEngine.invokeMethod($rule, "${type}ClassName", $api))
  $remoteApiBean.put('extendsClass', $rule["${type}ExtendsClass"])
  $remoteApiBean.put('implementsClasses', $rule["${type}ImplementsClasses"])
  $remoteApiBean.put('properties', $properties_)
  $remoteApiBean.put('beanPurposeType', $type)
  $remoteApiBean.put('remoteApiExp', "${api.httpMethod.toUpperCase()} ${api.url}")
  #set ($path = "${remoteApiBean.package.replaceAll('\.', '/')}/${remoteApiBean.className}.java")
  #generate("./remoteapi/RemoteApiBean.vm", $path, $remoteApiBean, true)
#end

## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
## Keep information of remote api behavior.
## @param api The information of api. (NotNull)
## @param pathVariables The array of path variables. (NotNull)
## @param paramBean The information of param bean. (NotNull)
## @param returnBean The information of return bean. (NotNull)
## @return bsBehaviorMap The map of base behavior information. (NotNull)
## @return exBehaviorMap The map of extended behavior information. (NotNull)
## _/_/_/_/_/_/_/_/_/_/
#macro(keepRemoteApiBehavior, $api, $pathVariables, $paramBean, $returnBean)
  #set ($subPackage = '')
  #set ($subPackage = $scriptEngine.invokeMethod($rule, 'behaviorSubPackage', $api))
  #set ($package = "${request.package}.${schemePackage}#if ($subPackage && $subPackage != '').${subPackage}#end")
  #set ($className = $scriptEngine.invokeMethod($rule, 'bsBehaviorClassName', $api))
  #set ($bsBehavior = { 'package': $package, 'className': $className, 'remoteApiExp': $subPackage, 'methodList': [] })
  #if (!$bsBehaviorMap.containsKey("${bsBehavior.package}.${bsBehavior.className}")) {
      $bsBehaviorMap.put("${bsBehavior.package}.${bsBehavior.className}", $bsBehavior)

      #set ($subPackage = '')
      #set ($subPackage = $scriptEngine.invokeMethod($rule, 'behaviorSubPackage', $api))
      #set ($package = "$request.package.$schemePackage#if ($subPackage && $subPackage != '').$subPackage#end")
      #set ($className = $scriptEngine.invokeMethod($rule, 'exBehaviorClassName', $api)))
      $exBehaviorMap.put("${package}.${className}", { 'package': $package, 'className': $className, 'remoteApiExp': $subPackage, 'bsBehavior': $bsBehavior })
  #end
  $bsBehaviorMap.get("${bsBehavior.package}.${bsBehavior.className}").methodList.add({ 'api': $api, 'pathVariables': $pathVariables, 'paramBean': $paramBean, 'returnBean': $returnBean })
#end

## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
## Process remote api behavior. (generating class)
## Also generate DI xml.
## _/_/_/_/_/_/_/_/_/_/
#macro(processRemoteApiBhv)
  #if ($rule['behaviorClassGeneration'])
    #set ($className = $scriptEngine.invokeMethod($rule, 'abstractBehaviorClassName', $scheme))
    #set ($abstractBehavior = { 'package': "${request.package}.${schemePackage}", 'className': $className, 'remoteApiExp': $request.requestName, 'frameworkBehaviorClass': $rule['frameworkBehaviorClass'] })
    #set ($path = "${abstractBehavior.package.replaceAll('\.', '/')}/${abstractBehavior.className}.java")
    #generate("./remoteapi/RemoteApiAbstractBehavior.vm", $path, $abstractBehavior, false)

    #foreach($bsBehavior in $bsBehaviorMap.values())
      #set ($path = "${bsBehavior.package.replaceAll('\.', '/')}/${bsBehavior.className}.java")
      #generate("./remoteapi/RemoteApiBsBehavior.vm", $path, $bsBehavior, true)
    #end

    #foreach($exBehavior in $exBehaviorMap.values())
      #set ($path = "${exBehavior.package.replaceAll('\.', '/')}/${exBehavior.className}.java")
      #generate("./remoteapi/RemoteApiExBehavior.vm", $path, $exBehavior, false)
    #end

    #if ($manager.isTargetContainerLastaDi())
      #set ($path = $scriptEngine.invokeMethod($rule, 'diXmlPath', $scheme, $request.resourceFile))
      #generate("./remoteapi/container/lastadi/RemoteApiDiXml.vm", $path, {}, true)
    #end
    #if ($manager.isTargetContainerSeasar())
      #set ($path = $scriptEngine.invokeMethod($rule, 'diconPath', $scheme, $request.resourceFile))
      #generate("./remoteapi/container/seasar/RemoteApiDicon.vm", $path, {}, true)
    #end
  #end
#end

## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
## Adjust java type of e.g. property. e.g. java.util.List to List
## @param type The type of java type. (NotNull)
## @return adjustType The filtered expression of the type. (NotNull)
## _/_/_/_/_/_/_/_/_/_/
#macro(adjustType, $type)
#set ($adjustType = ${type})
#set ($index = ${adjustType.lastIndexOf('.')})
#if ($index != -1)
#set ($index = $index + 1)
#set ($adjustType = ${adjustType.substring($index)})
#end
#set ($adjustType = $adjustType.replaceAll("^.*\$", ''))
#set ($adjustType = $scriptEngine.invokeMethod($rule, 'nestClassName', $scheme, $adjustType))
#end
