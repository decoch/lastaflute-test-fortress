##
## Copyright 2014-2016 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${manager.allClassCopyright}package ${request.package}.${subPackage};
#set ($importSet = $request.getClass().forName("java.util.LinkedHashSet").newInstance())
#foreach($propertyEntry in $definition.properties.entrySet())
#set ($property = $propertyEntry.value)
#if (${property.required})
#set($added = $importSet.add('org.lastaflute.web.validation.Required'))
#end
#if ($property.items && $property.items['$ref'])
#set ($nestType = $property.items['$ref'].replace('#/definitions/', ''))
#elseif ($property['$ref'])
#set ($nestType = $property['$ref'].replace('#/definitions/', ''))
#end
#if ($nestType && $nestType != '')
#foreach($nestPropertyEntry in $definitionMap[$nestType].properties.entrySet())
#set ($nestProperty = $nestPropertyEntry.value)
#if (${nestProperty.required})
#set($added = $importSet.add('org.lastaflute.web.validation.Required'))
#end
#end
#set ($nestType = '')
#end
#end

import org.lastaflute.core.util.Lato;
#foreach($import in $importSet)
import ${import};
#end

#set ($generatedClassSet = $request.getClass().forName("java.util.LinkedHashSet").newInstance())
#set($added = $generatedClassSet.add($class))
/**
 * ${class}.
 * @author FreeGen
 */
public class ${class} {
#foreach($propertyEntry in $definition.properties.entrySet())
#set ($fieldName = $propertyEntry.key)
#set ($property = $propertyEntry.value)

#if (${property.description})
    /** ${property.description}. */
#end
#if (${property.required})
    @Required
#end
#if ($property.type == 'array')
#if (${typeMap[$property.items.format]})
#set ($fieldClass = "${typeMap[$property.type]}<${typeMap[$property.items.format]}>")
#elseif (${typeMap[$property.items.type]})
#set ($fieldClass = "${typeMap[$property.type]}<${typeMap[$property.items.type]}>")
#else
#set ($nestType = $property.items['$ref'].replace('#/definitions/', ''))
#adjustType($nestType)
#set ($fieldClass = "${typeMap[$property.type]}<$adjustType>")
#end
#elseif (${typeMap[$property.format]})
#set ($fieldClass = ${typeMap[$property.format]})
#elseif (${typeMap[$property.type]})
#set ($fieldClass = ${typeMap[$property.type]})
#else
#set ($nestType = $property['$ref'].replace('#/definitions/', ''))
#adjustType($nestType)
#set ($fieldClass = $adjustType)
#end
    public ${fieldClass} ${fieldName};
#if ($nestType && $nestType != '' && !$generatedClassSet.contains($adjustType))
#set($added = $generatedClassSet.add($adjustType))

#generateNestType($nestType)
#end
#set ($nestType = '')
#end

    @Override
    public String toString() {
        return Lato.string(this);
    }
}
##################################################
## generate nest type.
##################################################
#macro(generateNestType, $type)
#adjustType($type)
    public static class $adjustType {
#foreach($nestPropertyEntry in $definitionMap[$type].properties.entrySet())
#set ($nestFieldName = $nestPropertyEntry.key)
#set ($nestProperty = $nestPropertyEntry.value)

#if (${nestProperty.description})
        /** ${nestProperty.description}. */
#end
#if (${nestProperty.required})
        @Required
#end
#if ($nestProperty.type == 'array')
#if (${typeMap[$nestProperty.items.format]})
#set ($nestFieldClass = "${typeMap[$nestProperty.type]}<${typeMap[$nestProperty.items.format]}>")
#elseif (${typeMap[$nestProperty.items.type]})
#set ($nestFieldClass = "${typeMap[$nestProperty.type]}<${typeMap[$nestProperty.items.type]}>")
#else
#adjustType($nestProperty.items['$ref'].replace('#/definitions/', ''))
#if (!$generatedClassSet.contains($adjustType))
#set($added = $generatedClassSet.add($adjustType))
        public static class $adjustType {
        }

#end
#set ($nestFieldClass = "${typeMap[$nestProperty.type]}<$adjustType>")
#end
#elseif (${typeMap[$nestProperty.format]})
#set ($nestFieldClass = ${typeMap[$nestProperty.format]})
#elseif (${typeMap[$nestProperty.type]})
#set ($nestFieldClass = ${typeMap[$nestProperty.type]})
#else
#adjustType($nestProperty['$ref'].replace('#/definitions/', ''))
#if (!$generatedClassSet.contains($adjustType))
#set($added = $generatedClassSet.add($adjustType))
        public static class $adjustType {
        }

#end
#set ($nestFieldClass = $adjustType)
#end
        public ${nestFieldClass} ${nestFieldName};
#end
    }
#end
