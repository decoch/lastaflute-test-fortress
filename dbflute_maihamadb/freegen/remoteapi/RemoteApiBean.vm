##
## Copyright 2014-2016 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${manager.allClassCopyright}package ${request.package}.${schemePackage}.${subPackage};
#set ($importSet = $request.getClass().forName("java.util.LinkedHashSet").newInstance())
#foreach($propertyEntry in $properties.entrySet())
#set ($property = $propertyEntry.value)
#if (${property.required})
#set($added = $importSet.add('org.lastaflute.web.validation.Required'))
#end
#if ($property.items && $property.items['$ref'])
#set ($nestType = $property.items['$ref'].replace('#/definitions/', ''))
#elseif ($property['$ref'])
#set ($nestType = $property['$ref'].replace('#/definitions/', ''))
#end
#if ($nestType && $nestType != '')
#foreach($nestPropertyEntry in $definitionMap[$nestType].properties.entrySet())
#set ($nestProperty = $nestPropertyEntry.value)
#if (${nestProperty.required})
#set($added = $importSet.add('org.lastaflute.web.validation.Required'))
#end
#end
#set ($nestType = '')
#end
#end

import org.lastaflute.core.util.Lato;
#foreach($import in $importSet)
import ${import};
#end

#set ($generatedClassSet = $request.getClass().forName("java.util.LinkedHashSet").newInstance())
#set($added = $generatedClassSet.add($class))
/**
 * The bean class as ${beanPurposeType} for remote API of ${remoteApiExp}.
 * @author FreeGen
 */
public class ${class}#if ($extendsClass && $extendsClass != '') extends $extendsClass#end#if ($implementsClasses && $implementsClasses != '') implements $implementsClasses#end {
#foreach($propertyEntry in $properties.entrySet())
#generateProperty($class, $propertyEntry)
#end

    @Override
    public String toString() {
        return Lato.string(this);
    }
}
##################################################
## generate property.
##################################################
#macro(generateProperty, $class $propertyEntry)
#set ($fieldName = $propertyEntry.key)
#set ($property = $propertyEntry.value)

#if ($scriptEngine.invokeFunction('beanPropertyManualMappingDescription', $api, $class, $property))
    #generateIndent()/** $scriptEngine.invokeFunction('beanPropertyManualMappingDescription', $api, $class, $property). #if (!${property.required})(NullAllowed) #end*/
#elseif (${property.description})
    #generateIndent()/** ${property.description}. #if (!${property.required})(NullAllowed) #end*/
#else
    #generateIndent()/** The property of ${fieldName}. #if (!${property.required})(NullAllowed) #end*/
#end
#if (${property.required})
    #generateIndent()@Required
#end
#if ($property.type == 'array')
#if ($scriptEngine.invokeFunction('beanPropertyManualMappingClass', $api, $class, $property))
#set ($fieldClass = "${typeMap[$property.type]}<$scriptEngine.invokeFunction('beanPropertyManualMappingClass', $api, $class, $property))>"))
#elseif ($property.items.enum)
#set ($enumValueList = $property.enum)
#set ($fieldClass = "${typeMap[$property.type]}<$manager.initCap($scriptEngine.invokeFunction('fieldName', $api, $fieldName))}>")
#elseif (${typeMap[$property.items.format]})
#set ($fieldClass = "${typeMap[$property.type]}<${typeMap[$property.items.format]}>")
#elseif (${typeMap[$property.items.type]})
#set ($fieldClass = "${typeMap[$property.type]}<${typeMap[$property.items.type]}>")
#else
#set ($nestType = $property.items['$ref'].replace('#/definitions/', ''))
#adjustType($nestType)
#set ($fieldClass = "${typeMap[$property.type]}<$adjustType>")
    #generateIndent()@javax.validation.Valid
#end
#elseif ($scriptEngine.invokeFunction('beanPropertyManualMappingClass', $api, $class, $property))
#set ($fieldClass = $scriptEngine.invokeFunction('beanPropertyManualMappingClass', $api, $class, $property))
#elseif ($property.enum)
#set ($enumValueList = $property.enum)
#set ($fieldClass = $manager.initCap($scriptEngine.invokeFunction('fieldName', $api, $fieldName)))
#elseif (${typeMap[$property.format]})
#set ($fieldClass = ${typeMap[$property.format]})
#elseif (${typeMap[$property.type]})
#set ($fieldClass = ${typeMap[$property.type]})
#else
#set ($nestType = $property['$ref'].replace('#/definitions/', ''))
#adjustType($nestType)
#set ($fieldClass = $adjustType)
    #generateIndent()@javax.validation.Valid
#end
    #generateIndent()public ${fieldClass} ${scriptEngine.invokeFunction('fieldName', $api, $fieldName)};
#if ($enumValueList && !$enumValueList.isEmpty())

    #generateIndent()/**
    #generateIndent() * The enumeration of ${fieldClass}.
    #generateIndent() * @author FreeGen
    #generateIndent() * @deprecated auto-generating enumeration is unsupported yet so use beanPropertyManualMappingClass()
    #generateIndent() */
    #generateIndent()public enum ${fieldClass} {
        #generateIndent()// TODO you auto-generating enumeration is unsupported yet so use beanPropertyManualMappingClass()
#foreach($enumValue in $enumValueList)
        #generateIndent()//$enumValue
#end
    #generateIndent()}
#end
#if ($nestType && $nestType != '' && !$generatedClassSet.contains($adjustType))
#set($added = $generatedClassSet.add($adjustType))

#set($nestList = [])
#generateNestType($nestType)
#set($nestList = [])
#end
#set ($nestType = '')
#set ($enumValueList = [])
#end
##################################################
## generate nest type.
##################################################
#macro(generateNestType, $type)
#set($added = $nestList.add($type))
#adjustType($type)
#generateIndent()/**
#generateIndent() * The part class of ${adjustType}.
#generateIndent() * @author FreeGen
#generateIndent() */
#generateIndent()public static class $adjustType {
#foreach($nestPropertyEntry in $definitionMap[$type].properties.entrySet())
#generateProperty($adjustType, $nestPropertyEntry)
#end
#generateIndent()}
#set($i = $nestList.size() - 1)
#set($removed = $nestList.remove($i))
#end
##################################################
## generate indent.
##################################################
#macro(generateIndent)
#foreach($nest in $nestList)    #end
#end
