##
## Copyright 2014-2016 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${manager.allClassCopyright}package ${request.package}.${subPackage};
#set ($importSet = $request.getClass().forName("java.util.LinkedHashSet").newInstance())
#set ($parameterFlg = false)
#if ($scriptEngine.eval('behaviorMethodGeneration'))
#foreach($method in $methodList)
#if (${method.requestBean.className} && ${method.requestBean.className} != '')
#set($added = $importSet.add("${method.requestBean.package}.${method.requestBean.className}"))
#set ($parameterFlg = true)
#end
#if (${method.responseBean.package} && ${method.responseBean.package} != '' && ${method.responseBean.className} && ${method.responseBean.className} != '')
#set($added = $importSet.add("${method.responseBean.package}.${method.responseBean.className}"))
#end
#end
#end
#if ($scriptEngine.eval('behaviorMethodGeneration'))

import java.util.function.Consumer;

import org.dbflute.remoteapi.FlutyRemoteApiRule;
#end
import org.lastaflute.web.servlet.request.RequestManager;

import ${request.package}.${abstractBehaviorSubPackage}.${abstractBehaviorClassName};
#foreach($import in $importSet)
import ${import};
#end

/**
 * ${class}.
 * @author FreeGen
 */
public abstract class ${class} extends ${abstractBehaviorClassName} {

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /***
     * @param requestManager The manager of request, that is LastaFlute component. (NotNull)
     */
    public ${class}(RequestManager requestManager) {
        super(requestManager);
    }
#if ($scriptEngine.eval('behaviorMethodGeneration'))
#foreach($method in $methodList)

#if ($foreach.index == 0)
    // ===================================================================================
    //                                                                             Execute
    //                                                                             =======
#end
#set ($behaviorRequestMethodName = $scriptEngine.invokeFunction('behaviorRequestMethodName', $method.api))
#set ($behaviorRuleMethodName = $scriptEngine.invokeFunction('behaviorRuleMethodName', $method.api))
#foreach($pathPropertyEntry in $method.pathProperties.entrySet())
#set ($behaviorRuleMethodName = "$behaviorRuleMethodName$manager.initCap($pathPropertyEntry.key)")
#end
#set ($parameterList = [])
#set ($parameterDefinition = '')
#set ($moreUrl = '')
#set ($responseBeanClassName = 'void')
#foreach($pathPropertyEntry in $method.pathProperties.entrySet())
#if (${typeMap[$pathPropertyEntry.value.format]})
#set ($parameterClass = ${typeMap[$pathPropertyEntry.value.format]})
#elseif (${typeMap[$pathPropertyEntry.value.type]})
#set ($parameterClass = ${typeMap[$pathPropertyEntry.value.type]})
#end
#if ($pathPropertyEntry.value.description)
#set ($added = $parameterList.add({ "name": ${pathPropertyEntry.key}, "description": "The value of path variable for $pathPropertyEntry.key($pathPropertyEntry.value.description). (NotNull)"}))
#else
#set ($added = $parameterList.add({ "name": ${pathPropertyEntry.key}, "description": "The value of path variable for $pathPropertyEntry.key. (NotNull)"}))
#end
#set ($parameterDefinition = "${parameterDefinition}${parameterClass} ${pathPropertyEntry.key}, ")
#set ($moreUrl = "${moreUrl}${pathPropertyEntry.key}, ")
#end
#if (${method.requestBean.className})
#set ($parameterDefinition = "${parameterDefinition}Consumer<${method.requestBean.className}> paramLamda")
#set ($added = $parameterList.add({ "name": "paramLamda",  "description": "The callback for $method.requestBean.className. (NotNull)"}))
#end
#set ($parameterDefinition = $parameterDefinition.replaceAll(', $', ''))
#set ($moreUrl = $moreUrl.replaceAll('^(.+), $', 'moreUrl($1)'))
#if ($moreUrl == '')
#set ($moreUrl = 'noMoreUrl()')
#end
#set ($responseBeanClassName = ${method.responseBean.className})
#set ($responseBeanClassName = $scriptEngine.invokeFunction('unDefinitionKey', ${responseBeanClassName}))
    /**
     * Request remote call to $method.api.url. (auto-generated method)<br>
     * <pre>
     * url: $method.api.url
     * httpMethod: $method.api.httpMethod.toUpperCase()
     * </pre>
#foreach($parameter in $parameterList)
     * @param $parameter.name $parameter.description
#end
#if ($responseBeanClassName != 'void')
     * @return The bean object as return type, receiving response body. (NotNull)
#end
     */
    $scriptEngine.eval('behaviorMethodAccessModifier') $responseBeanClassName $behaviorRequestMethodName($!{parameterDefinition}) {
#set ($ruleParam = 'rule -> {}')
       #if ($responseBeanClassName != 'void') return#end $behaviorRequestMethodName(#foreach($parameter in $parameterList)$parameter.name, #end$ruleParam);
    }

    /**
     * Request remote call to ${method.api.url}. (auto-generated method)<br>
     * <pre>
     * url: $method.api.url
     * httpMethod: $method.api.httpMethod.toUpperCase()
     * </pre>
#foreach($parameter in $parameterList)
     * @param $parameter.name $parameter.description
#end
     * @param ruleLambda The callback for setting rule as dynamic requirement. (NotNull)
#if ($responseBeanClassName != 'void')
     * @return The bean object as return type, receiving response body. (NotNull)
#end
     */
#set ($parameterDefinitionRule = "${parameterDefinition}")
#if ($parameterDefinitionRule && $parameterDefinitionRule != '')
#set ($parameterDefinitionRule = "${parameterDefinitionRule}, ")
#end
#set ($parameterDefinitionRule = "${parameterDefinitionRule}Consumer<FlutyRemoteApiRule> ruleLambda")
#if ($$responseBeanClassName.contains('<'))
#set ($returnType = "new org.lastaflute.di.helper.misc.ParameterizedRef<$responseBeanClassName>() {
        }.getType()")
#else
#set ($returnType = "${responseBeanClassName}.class")
#end
    protected $responseBeanClassName $behaviorRequestMethodName($!{parameterDefinitionRule}) {
#set ($paramMap = {})
#if ($method.api.httpMethod == 'get' || $method.api.httpMethod == 'delete')
#set ($param = 'noQuery()')
#else
#set ($param = 'null')
#end
#if (${method.requestBean.className} && ${method.requestBean.className} != '')
        ${method.requestBean.className} param = new ${method.requestBean.className}();
        paramLamda.accept(param);
#set($put = $paramMap.put('query', 'query(param)'))
#set($put = $paramMap.put('formData', 'param'))
#set($put = $paramMap.put('body', 'param'))
#end
#if ($paramMap.containsKey("$!{method.requestBean.in}"))
#set ($param = $paramMap["$!{method.requestBean.in}"])
#end
       #if ($responseBeanClassName != 'void') return#end doRequest$manager.initCap($method.api.httpMethod)($returnType, "${method.api.url}", $moreUrl, $param, rule -> {
#if ($method.requestBean.in == 'formData')
            rule.sendBodyBy(
                    new org.lastaflute.remoteapi.sender.body.LaFormSender(new org.dbflute.remoteapi.mapping.FlVacantMappingPolicy()));
#end
            $behaviorRuleMethodName(rule);
            ruleLambda.accept(rule);
        });
    }

    /**
     * Set up method-level rule of ${method.api.url}.<br>
     * @param rule The rule that class default rule is already set. (NotNull)
     */
    protected void $behaviorRuleMethodName(FlutyRemoteApiRule rule) {
    }
#end
#end
}
